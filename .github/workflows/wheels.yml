name: Wheel builder and uploader

# Update on every push and PR to main, and upon release creation
on:
  push:
    branches:
      - main
      - cibw
    paths:
      - '**'
      - '!tests/**'
      - '!doc/**'
      - '!.github/**'
      - '.github/workflows/wheels.yml'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'doc/**'
  release:
    types: [created]

jobs:
  build_wheels:
    name: Build wheel for ${{ matrix.python }}-${{ matrix.buildplat[1] }}
    runs-on: ${{ matrix.buildplat[0] }}
    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        # Following numpy's setup
        buildplat:
        - [ubuntu-latest, manylinux_x86_64]
        - [macos-latest, macosx_x86_64]
#        - [macos-latest, macosx_arm64]
        - [windows-2019, win_amd64]
        python: ["cp37", "cp38", "cp39", "cp310", "cp311"]
    steps:
      - uses: actions/checkout@v3
      - name: Install GSL (Windows)
        uses: mamba-org/provision-with-micromamba@v13
        if: matrix.buildplat[1] == 'win_amd64'
        with:
          environment-name: gsl
          environment-file: false
          channels: conda-forge
          extra-specs: gsl
      - name: Set GSL environment variables (Windows)
        if: matrix.buildplat[1] == 'win_amd64'
        shell: bash -l {0}
        run: |
          echo "INCLUDE=$CONDA_PREFIX\\Library\\include" >> $GITHUB_ENV
          echo "LIB=$CONDA_PREFIX\\Library\\lib" >> $GITHUB_ENV
          echo "LIBPATH=$CONDA_PREFIX\\Library\\lib" >> $GITHUB_ENV
          echo "$CONDA_PREFIX\\Library\\bin" >> $GITHUB_PATH # necessary when we don't activate the environment
      - name: Install GSL (Mac OS x86_64)
        if: matrix.buildplat[1] == 'macosx_x86_64'
        run: |
          curl -O https://conda.anaconda.org/conda-forge/osx-64/gsl-2.7-h93259b0_0.tar.bz2
          mkdir gsl
          tar -xjf gsl-2.7-h93259b0_0.tar.bz2 -C gsl
          rsync -azv gsl/bin/ /usr/local/bin/
          rsync -azv gsl/include/ /usr/local/include/
          rsync -azv gsl/lib/ /usr/local/lib/
      - name: Install GSL (Mac OS ARM64)
        if: matrix.buildplat[1] == 'macosx_arm64'
        run: |
          curl -O https://conda.anaconda.org/conda-forge/osx-64/gsl-2.7-h6e638da_0.tar.bz2
          mkdir gsl
          tar -xjf gsl-2.7-h6e638da_0.tar.bz2 -C gsl
          rsync -azv gsl/bin/ /usr/local/bin/
          rsync -azv gsl/include/ /usr/local/include/
          rsync -azv gsl/lib/ /usr/local/lib/
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.11.1
        env:
          CIBW_BUILD: ${{ matrix.python }}-${{ matrix.buildplat[1] }}
          CIBW_BEFORE_BUILD_LINUX: yum -y install gsl-devel
          CIBW_ARCHS_MACOS: x86_64 arm64
          CIBW_CONFIG_SETTINGS_MACOS: "--build-option=--no-openmp"
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: 'delocate-listdeps {wheel} && delocate-wheel -v --require-archs {delocate_archs} -w {dest_dir} {wheel}'
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.python }}-${{ startsWith(matrix.buildplat[1], 'macosx') && 'macosx' || matrix.buildplat[1] }}
          path: ./wheelhouse/*.whl
  build_sdist:
    name: Build source directory for release
    runs-on: ubuntu-latest
    steps:
      # check-out this repository
      - uses: actions/checkout@v3
      # Setup python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x
      # Install the GSL (necessary to properly include the C files)
      - name: Install GSL
        run: sudo apt-get install -y libgsl0-dev
      - name: Build sdist
        run: |
          pip install build
          python -m build --sdist
      - uses: actions/upload-artifact@v3
        with:
          name: sdist
          path: ./dist/*.tar.gz
# Deploy wheels and sdist to AWS S3 (main) or PyPI (upon release creation)
  deploy:
    name: Deploy wheels and sdist
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: |
          mkdir tmp_wheelhouse
          mkdir wheelhouse
      - uses: actions/download-artifact@v3
        with:
          path: tmp_wheelhouse/
      - run: find tmp_wheelhouse/ -mindepth 2 -type f -exec mv -i '{}' wheelhouse/ ';'
      - uses: actions/upload-artifact@v3
        with:
          name: galpy-wheels-linux-macos-windows-latest
          path: wheelhouse/*.whl
      # Upload to PyPI if this is a release
      - name: Publish distribution to PyPI
        if: github.event_name == 'release' && github.event.action == 'created'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.pypi_token }}
          packages_dir: wheelhouse/
      - name: Rename wheel to 'latest' version for AWS S3
        if: github.event_name != 'release' && github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        run: |
          GALPY_VERSION="$(awk '/^current_version/{print $NF}' .bumpversion.cfg)"
          for f in wheelhouse/*$GALPY_VERSION*.whl; do mv -i -- "$f" "${f//$GALPY_VERSION/latest}"; done
      # Upload to AWS S3
      - name: Upload to AWS S3
        if: github.event_name != 'release' && github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --acl public-read --follow-symlinks --delete --exclude "*emscripten*"
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-east-2'
          SOURCE_DIR: wheelhouse
          DEST_DIR: wheelhouse
